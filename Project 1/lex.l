%option main

DIGIT [0-9]
NUMBER [-+]?{DIGIT}+\.?{DIGIT}*
LOWERCASE_LETTER [a-z]
UPPERCASE_LETTER [A-Z]
STRING \"[^\"].*\"
ALPHANUMERIC ({LOWERCASE_LETTER}|{UPPERCASE_LETTER}|{DIGIT})
LEFT_PARANTHESIS \(
RIGHT_PARANTHESIS \)
LEFT_CURLY_BRACKET \{
RIGHT_CURLY_BRACKET \}
LEFT_SQUARE_BRACKET \[
RIGHT_SQUARE_BRACKET \]
IFSTMT if
ELSESTMT else
WHILE while
FOR for
INSERT insert
IN in
GET get
AND \&\&
OR \|\|
DOT \.
COMMA \,
SEMICOLON \;
COLON \:
NOT !
NOTEQUAL !=
EQUAL ==
ASSIGNMENT_OP =
SUBSET <
SUPERSET >
INTERSECTION \*
UNION \+
DIFFERENCE \^
FUNCTION {UPPERCASE_LETTER}{ALPHANUMERIC}*
VARIABLE {LOWERCASE_LETTER}{ALPHANUMERIC}*
RETURN return
NEWLINE [\n]
COMMENT #{STRING}

%%

{NUMBER} printf("NUMBER ");
{STRING} printf("STRING");
{LEFT_PARANTHESIS} printf("LEFT_PARANTHESIS ");
{RIGHT_PARANTHESIS} printf("RIGHT_PARANTHESIS ");
{LEFT_CURLY_BRACKET} printf("SET_HEAD_BRACKET ");
{RIGHT_CURLY_BRACKET} printf("SET_CLOSING_BRACKET ");
{LEFT_SQUARE_BRACKET} printf("SUBSET_HEAD_BRACKET ");
{RIGHT_SQUARE_BRACKET} printf("SUBSET_CLOSING_BRACKET ");
{FOR} printf("FOR ");
{WHILE} printf("WHILE ");
{IFSTMT} printf("IF ");
{ELSESTMT} printf("ELSE ");
{IN} printf("IN ");
{INSERT} printf("INSERT ");
{GET} printf("GET ");
{DOT} printf("DOT ");
{COMMA} printf("COMMA ");
{COLON} printf("COLON ");
{SEMICOLON} printf("SEMICOLON ");
{ASSIGNMENT_OP} printf("ASSIGNMENT_OP ");
{EQUAL} printf("EQUAL ");
{SUPERSET} printf("SUPERSET ");
{SUBSET} printf("SUBSET ");
{NOTEQUAL} printf("NOTEQUAL ");
{NOT} printf("NOT ");
{VARIABLE} printf("VARIABLE ");
{FUNCTION} printf("FUNCTION ");
{AND} printf("AND ");
{OR} printf("OR ");
{UNION} printf("UNION ");
{INTERSECTION} printf("INTERSECTION ");
{DIFFERENCE} printf("DIFFERENCE ");
{RETURN} printf("RETURN ");
{COMMENT} printf("COMMENT ");
{NEWLINE} printf("NEWLINE ");
%%
